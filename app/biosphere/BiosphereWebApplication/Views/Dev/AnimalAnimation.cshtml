<div class="k-content wide">
    <div id="toolbar"></div>
</div>
<div id="renderPlaceholder">
</div>

<script>
    $(document).ready(function() {
        $("#toolbar").kendoToolBar({
            items: [
                { template: "<label for='animalList'>Animal:</label>" },
                {
                    template: "<input id='animalList' style='width: 150px;' />",
                    overflow: "never"
                }
            ]
        });

        $("#animalList").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            dataSource: animalData,
            change: function(e) {
                currentSprite = this.value();
                printCurrentAnimal();
            }
        });
    });
</script>

@section ScriptInBody
{
    <script>
        var animal = null;
        var cursors = null;
        var currentSprite = "sheep";
        var animalLabel = null;

        var animalData = [
            { text: "Sheep", value: "sheep" },
            { text: "Cow", value: "cow" }
        ];

        var config = {
            type: Phaser.AUTO,
            width: 1200,
            height: 500,
            backgroundColor: "#458f56",
            physics: {
                default: "arcade",
                arcade: {
                    debug: false
                }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            },
            parent: "renderPlaceholder"
        };

        var game = new Phaser.Game(config);

        function preload () {
            this.load.path = commonscripts.getAssetsPath();
            for (let i = 0; i < animalData.length; i++) {
                let spriteName = animalData[i].value;
                this.load.spritesheet(spriteName, `/animals/${spriteName}_sprite/${spriteName}.png`, { frameWidth: 128, frameHeight: 128 }); //"/animals/animal_sprite/animal.json"
            }
        }

        function create ()
        {
            let help = this.add.text(16, 16, "[Arrows] to move the animal. [Space] to stop it. Click outside of the dropdown to apply changes.", { fontSize: "18px", fill: "#ffffff" });
            animalLabel = this.add.text(16, 48, "Unknown Animal", {fontSize: "18px", fill: "#ffffff" });
            printCurrentAnimal();
            animalLabel.setScrollFactor(0);
            help.setScrollFactor(0);

            animal = this.physics.add.sprite(100, 100, currentSprite); //generic sprite for all types of animal
            animal.setBounce(0.2);
            animal.setCollideWorldBounds(true);

            //create animation for all animals
            const fRate = 7;
            for (let i = 0; i < animalData.length; i++) {
                let spriteName = animalData[i].value;
                this.anims.create({
                    key: spriteName + "_up",
                    frames: this.anims.generateFrameNumbers(spriteName, { start: 0, end: 3 }),
                    frameRate: fRate,
                    repeat: -1
                });

                this.anims.create({
                    key: spriteName + "_left",
                    frames: this.anims.generateFrameNumbers(spriteName, { start: 4, end: 7 }),
                    frameRate: fRate,
                    repeat: -1
                });

                this.anims.create({
                    key: spriteName + "_down",
                    frames: this.anims.generateFrameNumbers(spriteName, { start: 8, end: 11 }),
                    frameRate: fRate,
                    repeat: -1
                });

                this.anims.create({
                    key: spriteName + "_right",
                    frames: this.anims.generateFrameNumbers(spriteName, { start: 12, end: 15 }),
                    frameRate: fRate,
                    repeat: -1
                });
            }

            cursors = this.input.keyboard.createCursorKeys();
        }

        function update () {
            const speed = 50;

            if (cursors.up.isDown)
            {
                animal.setVelocityY(-speed);
                animal.anims.play(currentSprite + "_up", true);
            }
            else if (cursors.left.isDown)
            {
                animal.setVelocityX(-speed);
                animal.anims.play(currentSprite + "_left", true);
            }
            else if (cursors.down.isDown) {
                animal.setVelocityY(speed);
                animal.anims.play(currentSprite + "_down", true);
            }
            else if (cursors.right.isDown) {
                animal.setVelocityX(speed);
                animal.anims.play(currentSprite + "_right", true);
            }
            else if (cursors.space.isDown) {
                animal.setVelocityX(0);
                animal.setVelocityY(0);
                animal.anims.stop();
            }
        }

        function printCurrentAnimal() {
            animalLabel.text = `Animal: ${currentSprite}`;
        }

    </script>
}
